# PROTO.txt
# description of the perpetrate packet protocol
# wcm, 2008.10.09 - 2008.11.25
# ===

Each active perpetrate process listens and replies on designated
named pipes for query and command requests from client programs.

A complete protocol transaction is illustrated below:

  perpetrate       perpctl, perpyank
  (server)         (client)
  =========        ==========

  listen
                   connect,
                   send request
            <-----
  accept,
  send reply,
  close connection
            ----->
                   read reply,
                   close connection


The communication of "requests" and "replies" is encapsulated
in packets.  A packet is a single contiguous sequence of bytes
described as follows:

  P T L <payload>

Where:

  P: one byte integer for protocol identifier (1 for version 1)

  T: one byte character for packet type identifier

      client request packet types:
        'Q' status query
        'C' service command
        'Y' "pidyank"

      server response packet types:
        'S' status data response
        'E' error response

  L: one byte integer for length of following payload

  <payload>: sequence of bytes of length L


As a consequence of the above definitions, the maximum payload for
a packet is 255 bytes.  A single packet may therefore be a maximum
of 255 + 3 = 258 bytes.


PACKET TYPES and EXAMPLES:

1) 'Q', query for status (client):

    1 'Q' 0 (empty payload)
    [3 bytes total]

2) 'S', status response (server):
    1 'S' 54 <54 bytes status binary data>
    [57 bytes total]

3) 'C', service command (client):
    1 'C' 1 't'
    [4 bytes total]

4) 'E', error response (server):
    1 'E' 4 <4 bytes packed uint32>
    [7 bytes total; 0 in payload means "no error"]

5) 'Y', pidyank request (client):
    1 'Y' 4 <4 bytes packed uint32>
    [7 bytes total]



CONCURRENCY

In the current implementation, the server is designed to process
one single client request transaction at a time.  The implementation
uses a posix advisory locking algorithm within the client applications
to enforce cooperative single concurrency.


### EOF
